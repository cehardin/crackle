/**
 * This file is part of crackle-impl.
 *
 * crackle-impl is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * crackle-impl is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with crackle-impl.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.crackle.impl;

import java.security.SecureRandom;
import java.util.Arrays;
import java.util.Objects;
import java.util.UUID;
import org.crackle.Address;

/**
 * Creates addresses suitable for distributed processing.  These addresses
 * by default contain a UUID and securely generated 4096 bits of identifying 
 * information (by default), 
 * making them extremely difficult to forge and globally unique. 
 * @author Chad
 */
public final class DistributedAddressFactory implements AddressFactory {

    /**
     * The default number of randomly generated bytes, 4096 bits, 512 bytes.
     */
    public static final int DEFAULT_NUM_BYTES = 512;

    private static final class DistributedAddress implements Address {
        private final UUID uuid;
        private final byte[] bytes;

        public DistributedAddress(SecureRandom secureRandom, int numBytes) {
            this.uuid = UUID.randomUUID();
            this.bytes = new byte[numBytes];
            secureRandom.nextBytes(bytes);
        }

        @Override
        public int hashCode() {
            return Objects.hash(uuid, Arrays.hashCode(bytes));
        }

        @Override
        public boolean equals(Object o) {
            final boolean equal;

            if (this == o) {
                equal = true;
            } else if (getClass().isInstance(o)) {
                final DistributedAddress other = getClass().cast(o);
                equal = uuid.equals(other.uuid) && Arrays.equals(bytes, other.bytes);
            } else {
                equal = false;
            }

            return equal;
        }
    }

    private final SecureRandom secureRandom = new SecureRandom();
    private final int numBytes;
    
    /**
     * Create with the default ize of random identifying information (4096 bits)
     */
    public DistributedAddressFactory() {
        this(DEFAULT_NUM_BYTES);
    }
    
    /**
     * Create with the specific number of random identifying information.
     * @param numBytes 
     */
    public DistributedAddressFactory(final int numBytes) {
        if(numBytes < 1) {
            throw new IllegalArgumentException();
        }
        this.numBytes = numBytes;
        
    }
    
    @Override
    public Address createAddress() {
        return new DistributedAddress(secureRandom, numBytes);
    }
}
